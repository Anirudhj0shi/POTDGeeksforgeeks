class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<int>adj[N];
        for(auto it:edges){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        vector<int>ans(N,-1);
        ans[src]=0;
        priority_queue<pair<int,int> ,vector<pair<int,int>> , greater<pair<int,int>> >pq;
        pq.push({src,0});
        while(!pq.empty()){
            int node =pq.top().first;
            int dist =pq.top().second;
            pq.pop();
            for(auto it:adj[node]){
                if(ans[it]==-1 || dist+1<ans[it]){
                    pq.push({it,dist+1});
                    ans[it]=dist+1;
                }
            }
        }
        
        return ans;
    }
};
